// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var VisualSearchBox;
    return VisualSearchBox = (function(_super) {
      __extends(VisualSearchBox, _super);

      function VisualSearchBox(options) {
        this.options = options;
        VisualSearchBox.__super__.constructor.call(this);
      }

      VisualSearchBox.prototype.init = function(instances) {
        var _this = this;
        this.graphModel = instances["GraphModel"];
        this.listenTo(instances["KeyListener"], "down:191", function(e) {
          _this.$("input").focus();
          return e.preventDefault();
        });
        this.render();
        return instances["Layout"].addPlugin(this.el, this.options.pluginOrder, 'Visual Search', true);
      };

      VisualSearchBox.prototype.render = function() {
        var $container,
          _this = this;
        $container = $("<div />").addClass("visual-search-container");
        $.get("/get_all_node_keys", function(data) {
          var $script, key;
          _this.properties = "[" + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              key = data[_i];
              _results.push("'" + key + "'");
            }
            return _results;
          })()) + "]";
          console.log(_this.properties);
          return $script = $("<div class=\"visual_search\"></div>\n<script type=\"text/javascript\" charset=\"utf-8\">\n  $(document).ready(function() {\n    var visualSearch = VS.init({\n      container : $('.visual_search'),\n      query     : '',\n      callbacks : {\n        search       : function(query, searchCollection) {},\n        facetMatches : function(callback) {callback(" + _this.properties + ");},\n        valueMatches : function(facet, searchTerm, callback) {}\n      }\n    });\n  });\n</script>").appendTo($container);
        });
        console.log("Rendering Visual Search plugin");
        this.$el.append($container);
        return this;
      };

      VisualSearchBox.prototype.addNode = function(e, datum) {
        var h, newNode, newNodeHash;
        newNode = {
          text: datum.value,
          '_id': -1
        };
        h = this.graphModel.get("nodeHash");
        newNodeHash = h(newNode);
        if (!_.some(this.graphModel.get("nodes"), function(node) {
          return h(node) === newNodeHash;
        })) {
          this.graphModel.putNode(newNode);
        }
        return $(e.target).blur();
      };

      return VisualSearchBox;

    })(Backbone.View);
  });

}).call(this);
