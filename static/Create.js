// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define([], function() {
    var Create;
    return Create = (function(_super) {
      __extends(Create, _super);

      function Create(options) {
        this.options = options;
        this.assign_properties = __bind(this.assign_properties, this);
        this.createNode = __bind(this.createNode, this);
        this.addNodeField = __bind(this.addNodeField, this);
        Create.__super__.constructor.call(this);
      }

      Create.prototype.init = function(instances) {
        _.extend(this, Backbone.Events);
        this.graphView = instances['GraphView'];
        this.graphModel = instances['GraphModel'];
        this.dataController = instances['local/Neo4jDataController'];
        instances["Layout"].addPlugin(this.el, this.options.pluginOrder, 'Create');
        return this.render();
      };

      Create.prototype.render = function() {
        var $container, $nodeCreate, $nodeMoreFields, nodeInputNumber,
          _this = this;
        $container = $("<div class=\"create-container\">\n  Create Node: \n  <div id=\"inputList\">\n  </div>\n</div>");
        $container.appendTo(this.$el);
        nodeInputNumber = 0;
        $nodeMoreFields = $("<input id=\"moreFields\" type=\"button\" value=\"+\">").appendTo($container);
        $nodeMoreFields.click(function() {
          _this.addNodeField(nodeInputNumber);
          return nodeInputNumber = nodeInputNumber + 1;
        });
        $nodeCreate = $("<input id=\"createObj\" type=\"button\" value=\"Create node\">").appendTo($container);
        $nodeCreate.click(this.createNode);
        return this;
      };

      Create.prototype.addNodeField = function(inputIndex) {
        var $row;
        $row = $("<div id=\'createDiv" + inputIndex + "\'>\n<input style=\"width:80px\" name=\"propertyNode" + inputIndex + "\" value=\"propertyEx\" class=\"propertyNode\">\n<input style=\"width:80px\" name=\"valueNode" + inputIndex + "\" value=\"valueEx\" class=\"valueNode\">\n<input type=\"button\" id=\"removeRow" + inputIndex + "\" value=\"x\" onclick=\'this.parentNode.parentNode.removeChild(this.parentNode);\'>\n</div>");
        return this.$("#inputList").append($row);
      };

      Create.prototype.createNode = function() {
        var nodeObject;
        console.log("create node called");
        nodeObject = this.assign_properties("Node");
        if (nodeObject[0]) {
          $('.NodeProperty').each(function(i, obj) {
            return $(this)[0].parentNode.removeChild($(this)[0]);
          });
          console.log(JSON.stringify(nodeObject[1]));
          return console.log("CALL THE SERVER TO MAKE A NODE", nodeObject[1]);
        }
      };

      Create.prototype.assign_properties = function(form_name) {
        var propertyObject, submitOK,
          _this = this;
        submitOK = true;
        propertyObject = {};
        $("." + form_name + "Property").each(function(i, obj) {
          var property, value;
          property = $(_this).children(".property" + form_name).val();
          value = $(_this).children(".value" + form_name).val();
          if (_this.is_illegal(property, "Property")) {
            return submitOK = false;
          } else if ((__indexOf.call(propertyObject, property) >= 0)) {
            alert("Property '" + property + "' already assigned.\nFirst value: " + propertyObject[property] + "\nSecond value: " + value);
            return submitOK = false;
          }
        });
        return [submitOK, propertyObject];
      };

      Create.prototype.is_illegal = function(property, type) {
        if (property === '') {
          alert(type + " name must not be empty.");
          return true;
        } else if (/^.*[^a-zA-Z0-9_].*$/.test(property)) {
          alert(type + " name '" + property + "' illegal: " + type + " names must only contain alphanumeric characters and underscore.");
          return true;
        } else if (reserved_keys.indexOf(property) !== -1) {
          alert(type + " name illegal: '" + property + "' is a reserved term.");
          return true;
        } else {
          return false;
        }
      };

      return Create;

    })(Backbone.View);
  });

}).call(this);
