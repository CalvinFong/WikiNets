// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var SyntaxCreate;
    return SyntaxCreate = (function(_super) {
      __extends(SyntaxCreate, _super);

      function SyntaxCreate(options) {
        this.options = options;
        SyntaxCreate.__super__.constructor.call(this);
      }

      SyntaxCreate.prototype.init = function(instances) {
        _.extend(this, Backbone.Events);
        this.keyListener = instances['KeyListener'];
        this.graphView = instances['GraphView'];
        this.graphModel = instances['GraphModel'];
        this.graphView.on("enter:node:click", this.update.bind(this));
        this.render();
        return instances["Layout"].addPlugin(this.el, this.options.pluginOrder, 'Syntax Create');
      };

      SyntaxCreate.prototype.render = function() {
        var $arrowInput, $container, $createArrowButton, $createNodeButton, $sourceInput, $targetInput;
        $container = $("<div class=\"syntax-create-container\">").appendTo(this.$el);
        $createNodeButton = $("<input id=\"createNodeButton\" type=\"submit\" value=\"New Node\">").appendTo($container);
        $createArrowButton = $("<input id=\"createArrowButton\" type=\"submit\" value=\"New Arrow\">").appendTo($container);
        $("<br>").appendTo($container);
        $sourceInput = $("<textarea id=\"searchAddNodeField\" name=\"textin\" rows=\"4\" cols=\"27\"></textarea><br>").appendTo($container);
        $arrowInput = $("<textarea id=\"searchAddNodeField\" name=\"textin\" rows=\"4\" cols=\"27\"></textarea><br>").appendTo($container);
        return $targetInput = $("<textarea id=\"searchAddNodeField\" name=\"textin\" rows=\"4\" cols=\"27\"></textarea><br>").appendTo($container);
      };

      SyntaxCreate.prototype.update = function() {};

      return SyntaxCreate;

    })(Backbone.View);
  });

}).call(this);
