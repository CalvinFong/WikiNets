// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["DataController"], function(DataController) {
    var Neo4jDataController, _ref;
    return Neo4jDataController = (function(_super) {
      __extends(Neo4jDataController, _super);

      function Neo4jDataController() {
        _ref = Neo4jDataController.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Neo4jDataController.prototype.nodeAdd = function(node, callback) {
        var filteredNode;
        filteredNode = this.filterNode(node);
        console.log("filtered: ", filteredNode);
        return $.post("/create_node", filteredNode, callback);
      };

      Neo4jDataController.prototype.nodeDelete = function(node, callback) {
        return $.post("/delete_node", this.filterNode(node), callback);
      };

      Neo4jDataController.prototype.nodeEdit = function(oldNode, newNode) {
        return $.post("/edit_node", this.filterNode(node), callback);
      };

      Neo4jDataController.prototype.linkAdd = function(link, callback) {
        var filteredLink;
        filteredLink = link;
        filteredLink.source = this.filterNode(link.source);
        filteredLink.target = this.filterNode(link.target);
        return $.post("/create_link", link, callback);
      };

      Neo4jDataController.prototype.linkDelete = function(link) {
        return $.post("/delete_arrow", link, callback);
      };

      Neo4jDataController.prototype.linkEdit = function(oldLink, newLink) {
        return $.post("/edit_arrow", link, callback);
      };

      Neo4jDataController.prototype.filterNode = function(node) {
        var blacklist, filteredNode;
        blacklist = ["index", "x", "y", "px", "py", "fixed", "selected", "weight"];
        filteredNode = {};
        _.each(node, function(value, property) {
          if (blacklist.indexOf(property) < 0) {
            return filteredNode[property] = value;
          }
        });
        return filteredNode;
      };

      return Neo4jDataController;

    })(DataController);
  });

}).call(this);
